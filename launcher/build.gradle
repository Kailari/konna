import org.gradle.internal.os.OperatingSystem

plugins {
    id "application"
    id "java"
    id "org.beryx.jlink" version "2.17.6"
}

final def buildPlatformName = System.getenv("TARGET_PLATFORM")
def buildPlatform = buildPlatformName != null ? OperatingSystem.forName(buildPlatformName) : null
if (buildPlatform == null) {
    buildPlatform = OperatingSystem.current()
}

dependencies {
    implementation project(':game.app')

    // LWJGL and its components
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    final def lwjglNatives = selectNatives(buildPlatform)
    for (final lwjglModule in ["", "-assimp", "-glfw", "-openal", "-opengl", "-stb", "-opengl"]) {
        implementation "org.lwjgl:lwjgl${lwjglModule}"
        implementation "org.lwjgl:lwjgl${lwjglModule}::${lwjglNatives}"
    }
    implementation "org.joml:joml:${jomlVersion}"
}

application {
    mainClassName = "roguelite.launcher/fi.jakojaannos.roguelite.launcher.Main"
    //applicationDefaultJvmArgs = ['-XX:+PrintGCDetails']
}

jlink {
    // XXX: Stripping debug symbols makes classloader fail on some records
    addOptions /*'--strip-debug', */ '--compress', '2', '--no-header-files', '--no-man-pages'
    forceMerge 'log4j-api'
    launcher {
        name = 'konna'
        jvmArgs = ['--enable-preview']
    }
}

def targetAssetsPath = "${buildDir}/image"

if (buildPlatformName != null) {
    jlink {
        final def CI = System.getenv("CI")
        final def path = (CI != null && CI == "true")
                ? "${System.getenv("HOME")}/repo/jdk/jdk-${buildPlatformName}/jdk-14/"
                : getPlatformHomeWithFallBack(buildPlatformName)
        if (path == null) {
            throw new IllegalStateException("Could not determine JDK location for platform \"${buildPlatformName}\"")
        }
        targetPlatform(buildPlatformName, path)
    }

    targetAssetsPath += "/konna-${buildPlatformName}"
}
tasks.jlink.doLast {
    copy {
        from('../assets')
        into("${targetAssetsPath}/bin/assets")
        exclude("**/*.aseprite")
    }
}

run {
    //jvmArgs = ['-XX:+PrintGCDetails']
    setArgsString("--debug --assetRoot ../assets/")
}

task runClient {
    group 'application'

    doFirst { run.setArgsString("--debug --assetRoot ../assets/ --client localhost 18181") }
    finalizedBy(run)
}

task runServer {
    group 'application'

    doFirst { run.setArgsString("--debug --assetRoot ../assets/ --server 18181") }
    finalizedBy(run)
}

jar {
    manifest {
        attributes "Main-Class": "fi.jakojaannos.roguelite.launcher.Main"
    }
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}


static String selectNatives(final OperatingSystem platform) {
    switch (platform) {
        case OperatingSystem.LINUX:
            return "natives-linux"
        case OperatingSystem.MAC_OS:
            return "natives-macos"
        case OperatingSystem.WINDOWS:
            return "natives-windows"
        default:
            throw new UnsupportedOperationException("Unknown build platform: \"${platform}\"");
    }
}

static String getPlatformHomeWithFallBack(final String platformName) {
    final def path = System.getenv("JAVA_HOME_${platformName.toUpperCase()}")
    return path != null ? path : System.getenv("JAVA_HOME")
}
