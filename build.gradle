plugins {
    id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
    id 'java'
    id 'jacoco'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.javamodularity.moduleplugin'
    //apply plugin: 'checkstyle'

    compileJava {
        sourceCompatibility = 14
        targetCompatibility = 14
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += '--enable-preview'
    }
    tasks.withType(JavaExec) {
        jvmArgs += '--enable-preview'
    }
    tasks.withType(Test) {
        jvmArgs += "--enable-preview"
    }

    /*checkstyle {
        configFile file('../config/checkstyle/checkstyle.xml')
        toolVersion '8.29'
    }*/

    dependencies {
        // FindBugs Annotations
        implementation "com.google.code.findbugs:jsr305:3.0.2"

        // Logging
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "org.apache.logging.log4j:log4j-api:${log4j2Version}"
        runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jBridgeVersion}"
        runtimeOnly "org.apache.logging.log4j:log4j-core:${log4j2Version}"

        // JUnit 5
        testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${jUnitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
        test.useJUnitPlatform()

        // Mockito
        testCompileOnly "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}"
    }

    test {
        environment "ENVIRONMENT", "test"
//        systemProperty("junit.jupiter.execution.parallel.enabled", true)
//        systemProperty("junit.jupiter.execution.parallel.mode.default", "CONCURRENT")
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            stackTraceFilters = []
        }

        // TODO: Does this work?
        moduleOptions {
            runOnClasspath = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(subprojects.sourceSets.main.output)
    executionData.from files(subprojects.jacocoTestReport.executionData)

    afterEvaluate {
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/engine/lwjgl/**/*"
            ])
        })
    }

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData.from files(executionData.findAll { it.exists() })
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task in all subprojects
    reportOn subprojects*.test.binResultsDir
}

subprojects {
    test.finalizedBy(testReport)
}
