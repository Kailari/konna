import org.gradle.internal.os.OperatingSystem


def buildPlatformName = System.getenv("TARGET_PLATFORM")
def buildPlatform = buildPlatformName != null ? OperatingSystem.forName(buildPlatformName) : null
if (buildPlatform == null) {
    buildPlatform = OperatingSystem.current()
}

switch (buildPlatform) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

dependencies {
    implementation project(':engine')
    implementation project(':engine.ecs')
    implementation project(':engine.utilities')
    implementation project(':engine.view')
    implementation project(':engine.lwjgl')

    implementation project(':game')
    implementation project(':game.view')

    implementation "org.joml:joml:${jomlVersion}"

    // Required for MemoryUtil and MemoryStack
    testRuntimeOnly "org.lwjgl:lwjgl::${lwjglNatives}"

    // Cucumber for fancy tests
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jUnitVersion}"
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}
