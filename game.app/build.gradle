import org.gradle.internal.os.OperatingSystem


final def buildPlatformName = System.getenv("TARGET_PLATFORM")
def buildPlatform = buildPlatformName != null ? OperatingSystem.forName(buildPlatformName) : null
if (buildPlatform == null) {
    buildPlatform = OperatingSystem.current()
}

def final implementationModules = ['', '-glfw', '-vulkan', '-shaderc', '-stb', '-assimp']
def final runtimeModules = ['', '-glfw', '-shaderc', '-stb', '-assimp']

dependencies {
    implementation project(':riista')
    implementation project(':riista.ecs')
    implementation project(':riista.utilities')

    implementation project(':riista.view')
    implementation project(':riista.vulkan')

    implementation project(':game')
    implementation project(':game.view')

    implementation "org.joml:joml:${jomlVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // LWJGL 3 (Minimal Vulkan)
    // "org.lwjgl:lwjgl" is required for MemoryUtil and MemoryStack
    // other lwjgl modules are there just for running tests with the full renderer
    implementation platform("org.lwjgl:lwjgl-bom:${lwjglVersion}")
    final def lwjglNatives = selectNatives(buildPlatform)
    for (final modulePostfix in implementationModules) { implementation "org.lwjgl:lwjgl${modulePostfix}" }

    // FIXME: This should be `runtimeOnly` instead of `implementation` but that breaks `module-info.java`
    for (final modulePostfix in runtimeModules) { implementation "org.lwjgl:lwjgl${modulePostfix}::${lwjglNatives}" }
    if (lwjglNatives == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan::${lwjglNatives}"

    // Test dependencies
    testImplementation project(':koetus.assert')

    // Cucumber for fancy tests
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jUnitVersion}"
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}

static String selectNatives(final OperatingSystem platform) {
    switch (platform) {
        case OperatingSystem.LINUX:
            return "natives-linux"
        case OperatingSystem.MAC_OS:
            return "natives-macos"
        case OperatingSystem.WINDOWS:
            return "natives-windows"
        default:
            throw new UnsupportedOperationException("Unknown build platform: \"${platform}\"")
    }
}
