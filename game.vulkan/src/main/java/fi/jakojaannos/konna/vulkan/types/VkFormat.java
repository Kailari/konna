package fi.jakojaannos.konna.vulkan.types;

import org.lwjgl.vulkan.VkFormatProperties;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import fi.jakojaannos.konna.util.BitMask;
import fi.jakojaannos.konna.vulkan.device.DeviceContext;

import static fi.jakojaannos.konna.util.BitMask.bitMask;
import static org.lwjgl.system.MemoryStack.stackPush;
import static org.lwjgl.vulkan.VK11.*;

/**
 * VkFormat - Available image formats.
 * <p>
 * Enum wrapper around {@link org.lwjgl.vulkan.VK11#VK_FORMAT_UNDEFINED VK_FORMAT_XXX} constants.
 */
public enum VkFormat {
    UNDEFINED(VK_FORMAT_UNDEFINED),
    R4G4_UNORM_PACK8(VK_FORMAT_R4G4_UNORM_PACK8),
    R4G4B4A4_UNORM_PACK16(VK_FORMAT_R4G4B4A4_UNORM_PACK16),
    B4G4R4A4_UNORM_PACK16(VK_FORMAT_B4G4R4A4_UNORM_PACK16),
    R5G6B5_UNORM_PACK16(VK_FORMAT_R5G6B5_UNORM_PACK16),
    B5G6R5_UNORM_PACK16(VK_FORMAT_B5G6R5_UNORM_PACK16),
    R5G5B5A1_UNORM_PACK16(VK_FORMAT_R5G5B5A1_UNORM_PACK16),
    B5G5R5A1_UNORM_PACK16(VK_FORMAT_B5G5R5A1_UNORM_PACK16),
    A1R5G5B5_UNORM_PACK16(VK_FORMAT_A1R5G5B5_UNORM_PACK16),
    R8_UNORM(VK_FORMAT_R8_UNORM),
    R8_SNORM(VK_FORMAT_R8_SNORM),
    R8_USCALED(VK_FORMAT_R8_USCALED),
    R8_SSCALED(VK_FORMAT_R8_SSCALED),
    R8_UINT(VK_FORMAT_R8_UINT),
    R8_SINT(VK_FORMAT_R8_SINT),
    R8_SRGB(VK_FORMAT_R8_SRGB),
    R8G8_UNORM(VK_FORMAT_R8G8_UNORM),
    R8G8_SNORM(VK_FORMAT_R8G8_SNORM),
    R8G8_USCALED(VK_FORMAT_R8G8_USCALED),
    R8G8_SSCALED(VK_FORMAT_R8G8_SSCALED),
    R8G8_UINT(VK_FORMAT_R8G8_UINT),
    R8G8_SINT(VK_FORMAT_R8G8_SINT),
    R8G8_SRGB(VK_FORMAT_R8G8_SRGB),
    R8G8B8_UNORM(VK_FORMAT_R8G8B8_UNORM),
    R8G8B8_SNORM(VK_FORMAT_R8G8B8_SNORM),
    R8G8B8_USCALED(VK_FORMAT_R8G8B8_USCALED),
    R8G8B8_SSCALED(VK_FORMAT_R8G8B8_SSCALED),
    R8G8B8_UINT(VK_FORMAT_R8G8B8_UINT),
    R8G8B8_SINT(VK_FORMAT_R8G8B8_SINT),
    R8G8B8_SRGB(VK_FORMAT_R8G8B8_SRGB),
    B8G8R8_UNORM(VK_FORMAT_B8G8R8_UNORM),
    B8G8R8_SNORM(VK_FORMAT_B8G8R8_SNORM),
    B8G8R8_USCALED(VK_FORMAT_B8G8R8_USCALED),
    B8G8R8_SSCALED(VK_FORMAT_B8G8R8_SSCALED),
    B8G8R8_UINT(VK_FORMAT_B8G8R8_UINT),
    B8G8R8_SINT(VK_FORMAT_B8G8R8_SINT),
    B8G8R8_SRGB(VK_FORMAT_B8G8R8_SRGB),
    R8G8B8A8_UNORM(VK_FORMAT_R8G8B8A8_UNORM, 4 * Byte.BYTES),
    R8G8B8A8_SNORM(VK_FORMAT_R8G8B8A8_SNORM, 4 * Byte.BYTES),
    R8G8B8A8_USCALED(VK_FORMAT_R8G8B8A8_USCALED),
    R8G8B8A8_SSCALED(VK_FORMAT_R8G8B8A8_SSCALED),
    R8G8B8A8_UINT(VK_FORMAT_R8G8B8A8_UINT, 4 * Byte.BYTES),
    R8G8B8A8_SINT(VK_FORMAT_R8G8B8A8_SINT, 4 * Byte.BYTES),
    R8G8B8A8_SRGB(VK_FORMAT_R8G8B8A8_SRGB),
    B8G8R8A8_UNORM(VK_FORMAT_B8G8R8A8_UNORM),
    B8G8R8A8_SNORM(VK_FORMAT_B8G8R8A8_SNORM),
    B8G8R8A8_USCALED(VK_FORMAT_B8G8R8A8_USCALED),
    B8G8R8A8_SSCALED(VK_FORMAT_B8G8R8A8_SSCALED),
    B8G8R8A8_UINT(VK_FORMAT_B8G8R8A8_UINT),
    B8G8R8A8_SINT(VK_FORMAT_B8G8R8A8_SINT),
    B8G8R8A8_SRGB(VK_FORMAT_B8G8R8A8_SRGB),
    A8B8G8R8_UNORM_PACK32(VK_FORMAT_A8B8G8R8_UNORM_PACK32),
    A8B8G8R8_SNORM_PACK32(VK_FORMAT_A8B8G8R8_SNORM_PACK32),
    A8B8G8R8_USCALED_PACK32(VK_FORMAT_A8B8G8R8_USCALED_PACK32),
    A8B8G8R8_SSCALED_PACK32(VK_FORMAT_A8B8G8R8_SSCALED_PACK32),
    A8B8G8R8_UINT_PACK32(VK_FORMAT_A8B8G8R8_UINT_PACK32),
    A8B8G8R8_SINT_PACK32(VK_FORMAT_A8B8G8R8_SINT_PACK32),
    A8B8G8R8_SRGB_PACK32(VK_FORMAT_A8B8G8R8_SRGB_PACK32),
    A2R10G10B10_UNORM_PACK32(VK_FORMAT_A2R10G10B10_UNORM_PACK32),
    A2R10G10B10_SNORM_PACK32(VK_FORMAT_A2R10G10B10_SNORM_PACK32),
    A2R10G10B10_USCALED_PACK32(VK_FORMAT_A2R10G10B10_USCALED_PACK32),
    A2R10G10B10_SSCALED_PACK32(VK_FORMAT_A2R10G10B10_SSCALED_PACK32),
    A2R10G10B10_UINT_PACK32(VK_FORMAT_A2R10G10B10_UINT_PACK32),
    A2R10G10B10_SINT_PACK32(VK_FORMAT_A2R10G10B10_SINT_PACK32),
    A2B10G10R10_UNORM_PACK32(VK_FORMAT_A2B10G10R10_UNORM_PACK32),
    A2B10G10R10_SNORM_PACK32(VK_FORMAT_A2B10G10R10_SNORM_PACK32),
    A2B10G10R10_USCALED_PACK32(VK_FORMAT_A2B10G10R10_USCALED_PACK32),
    A2B10G10R10_SSCALED_PACK32(VK_FORMAT_A2B10G10R10_SSCALED_PACK32),
    A2B10G10R10_UINT_PACK32(VK_FORMAT_A2B10G10R10_UINT_PACK32),
    A2B10G10R10_SINT_PACK32(VK_FORMAT_A2B10G10R10_SINT_PACK32),
    R16_UNORM(VK_FORMAT_R16_UNORM),
    R16_SNORM(VK_FORMAT_R16_SNORM),
    R16_USCALED(VK_FORMAT_R16_USCALED),
    R16_SSCALED(VK_FORMAT_R16_SSCALED),
    R16_UINT(VK_FORMAT_R16_UINT),
    R16_SINT(VK_FORMAT_R16_SINT),
    R16_SFLOAT(VK_FORMAT_R16_SFLOAT),
    R16G16_UNORM(VK_FORMAT_R16G16_UNORM),
    R16G16_SNORM(VK_FORMAT_R16G16_SNORM),
    R16G16_USCALED(VK_FORMAT_R16G16_USCALED),
    R16G16_SSCALED(VK_FORMAT_R16G16_SSCALED),
    R16G16_UINT(VK_FORMAT_R16G16_UINT),
    R16G16_SINT(VK_FORMAT_R16G16_SINT),
    R16G16_SFLOAT(VK_FORMAT_R16G16_SFLOAT),
    R16G16B16_UNORM(VK_FORMAT_R16G16B16_UNORM),
    R16G16B16_SNORM(VK_FORMAT_R16G16B16_SNORM),
    R16G16B16_USCALED(VK_FORMAT_R16G16B16_USCALED),
    R16G16B16_SSCALED(VK_FORMAT_R16G16B16_SSCALED),
    R16G16B16_UINT(VK_FORMAT_R16G16B16_UINT),
    R16G16B16_SINT(VK_FORMAT_R16G16B16_SINT),
    R16G16B16_SFLOAT(VK_FORMAT_R16G16B16_SFLOAT),
    R16G16B16A16_UNORM(VK_FORMAT_R16G16B16A16_UNORM),
    R16G16B16A16_SNORM(VK_FORMAT_R16G16B16A16_SNORM),
    R16G16B16A16_USCALED(VK_FORMAT_R16G16B16A16_USCALED),
    R16G16B16A16_SSCALED(VK_FORMAT_R16G16B16A16_SSCALED),
    R16G16B16A16_UINT(VK_FORMAT_R16G16B16A16_UINT),
    R16G16B16A16_SINT(VK_FORMAT_R16G16B16A16_SINT),
    R16G16B16A16_SFLOAT(VK_FORMAT_R16G16B16A16_SFLOAT),
    R32_UINT(VK_FORMAT_R32_UINT, Integer.BYTES),
    R32_SINT(VK_FORMAT_R32_SINT, Integer.BYTES),
    R32_SFLOAT(VK_FORMAT_R32_SFLOAT, Float.BYTES),
    R32G32_UINT(VK_FORMAT_R32G32_UINT, 2 * Integer.BYTES),
    R32G32_SINT(VK_FORMAT_R32G32_SINT, 2 * Integer.BYTES),
    R32G32_SFLOAT(VK_FORMAT_R32G32_SFLOAT, 2 * Float.BYTES),
    R32G32B32_UINT(VK_FORMAT_R32G32B32_UINT, 3 * Integer.BYTES),
    R32G32B32_SINT(VK_FORMAT_R32G32B32_SINT, 3 * Integer.BYTES),
    R32G32B32_SFLOAT(VK_FORMAT_R32G32B32_SFLOAT, 3 * Float.BYTES),
    R32G32B32A32_UINT(VK_FORMAT_R32G32B32A32_UINT, 4 * Integer.BYTES),
    R32G32B32A32_SINT(VK_FORMAT_R32G32B32A32_SINT, 4 * Integer.BYTES),
    R32G32B32A32_SFLOAT(VK_FORMAT_R32G32B32A32_SFLOAT, 4 * Float.BYTES),
    R64_UINT(VK_FORMAT_R64_UINT),
    R64_SINT(VK_FORMAT_R64_SINT),
    R64_SFLOAT(VK_FORMAT_R64_SFLOAT),
    R64G64_UINT(VK_FORMAT_R64G64_UINT),
    R64G64_SINT(VK_FORMAT_R64G64_SINT),
    R64G64_SFLOAT(VK_FORMAT_R64G64_SFLOAT),
    R64G64B64_UINT(VK_FORMAT_R64G64B64_UINT),
    R64G64B64_SINT(VK_FORMAT_R64G64B64_SINT),
    R64G64B64_SFLOAT(VK_FORMAT_R64G64B64_SFLOAT),
    R64G64B64A64_UINT(VK_FORMAT_R64G64B64A64_UINT),
    R64G64B64A64_SINT(VK_FORMAT_R64G64B64A64_SINT),
    R64G64B64A64_SFLOAT(VK_FORMAT_R64G64B64A64_SFLOAT),
    B10G11R11_UFLOAT_PACK32(VK_FORMAT_B10G11R11_UFLOAT_PACK32),
    E5B9G9R9_UFLOAT_PACK32(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32),
    D16_UNORM(VK_FORMAT_D16_UNORM),
    X8_D24_UNORM_PACK32(VK_FORMAT_X8_D24_UNORM_PACK32),
    D32_SFLOAT(VK_FORMAT_D32_SFLOAT),
    S8_UINT(VK_FORMAT_S8_UINT),
    D16_UNORM_S8_UINT(VK_FORMAT_D16_UNORM_S8_UINT),
    D24_UNORM_S8_UINT(VK_FORMAT_D24_UNORM_S8_UINT),
    D32_SFLOAT_S8_UINT(VK_FORMAT_D32_SFLOAT_S8_UINT),
    BC1_RGB_UNORM_BLOCK(VK_FORMAT_BC1_RGB_UNORM_BLOCK),
    BC1_RGB_SRGB_BLOCK(VK_FORMAT_BC1_RGB_SRGB_BLOCK),
    BC1_RGBA_UNORM_BLOCK(VK_FORMAT_BC1_RGBA_UNORM_BLOCK),
    BC1_RGBA_SRGB_BLOCK(VK_FORMAT_BC1_RGBA_SRGB_BLOCK),
    BC2_UNORM_BLOCK(VK_FORMAT_BC2_UNORM_BLOCK),
    BC2_SRGB_BLOCK(VK_FORMAT_BC2_SRGB_BLOCK),
    BC3_UNORM_BLOCK(VK_FORMAT_BC3_UNORM_BLOCK),
    BC3_SRGB_BLOCK(VK_FORMAT_BC3_SRGB_BLOCK),
    BC4_UNORM_BLOCK(VK_FORMAT_BC4_UNORM_BLOCK),
    BC4_SNORM_BLOCK(VK_FORMAT_BC4_SNORM_BLOCK),
    BC5_UNORM_BLOCK(VK_FORMAT_BC5_UNORM_BLOCK),
    BC5_SNORM_BLOCK(VK_FORMAT_BC5_SNORM_BLOCK),
    BC6H_UFLOAT_BLOCK(VK_FORMAT_BC6H_UFLOAT_BLOCK),
    BC6H_SFLOAT_BLOCK(VK_FORMAT_BC6H_SFLOAT_BLOCK),
    BC7_UNORM_BLOCK(VK_FORMAT_BC7_UNORM_BLOCK),
    BC7_SRGB_BLOCK(VK_FORMAT_BC7_SRGB_BLOCK),
    ETC2_R8G8B8_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK),
    ETC2_R8G8B8_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK),
    ETC2_R8G8B8A1_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK),
    ETC2_R8G8B8A1_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK),
    ETC2_R8G8B8A8_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK),
    ETC2_R8G8B8A8_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK),
    EAC_R11_UNORM_BLOCK(VK_FORMAT_EAC_R11_UNORM_BLOCK),
    EAC_R11_SNORM_BLOCK(VK_FORMAT_EAC_R11_SNORM_BLOCK),
    EAC_R11G11_UNORM_BLOCK(VK_FORMAT_EAC_R11G11_UNORM_BLOCK),
    EAC_R11G11_SNORM_BLOCK(VK_FORMAT_EAC_R11G11_SNORM_BLOCK),
    ASTC_4x4_UNORM_BLOCK(VK_FORMAT_ASTC_4x4_UNORM_BLOCK),
    ASTC_4x4_SRGB_BLOCK(VK_FORMAT_ASTC_4x4_SRGB_BLOCK),
    ASTC_5x4_UNORM_BLOCK(VK_FORMAT_ASTC_5x4_UNORM_BLOCK),
    ASTC_5x4_SRGB_BLOCK(VK_FORMAT_ASTC_5x4_SRGB_BLOCK),
    ASTC_5x5_UNORM_BLOCK(VK_FORMAT_ASTC_5x5_UNORM_BLOCK),
    ASTC_5x5_SRGB_BLOCK(VK_FORMAT_ASTC_5x5_SRGB_BLOCK),
    ASTC_6x5_UNORM_BLOCK(VK_FORMAT_ASTC_6x5_UNORM_BLOCK),
    ASTC_6x5_SRGB_BLOCK(VK_FORMAT_ASTC_6x5_SRGB_BLOCK),
    ASTC_6x6_UNORM_BLOCK(VK_FORMAT_ASTC_6x6_UNORM_BLOCK),
    ASTC_6x6_SRGB_BLOCK(VK_FORMAT_ASTC_6x6_SRGB_BLOCK),
    ASTC_8x5_UNORM_BLOCK(VK_FORMAT_ASTC_8x5_UNORM_BLOCK),
    ASTC_8x5_SRGB_BLOCK(VK_FORMAT_ASTC_8x5_SRGB_BLOCK),
    ASTC_8x6_UNORM_BLOCK(VK_FORMAT_ASTC_8x6_UNORM_BLOCK),
    ASTC_8x6_SRGB_BLOCK(VK_FORMAT_ASTC_8x6_SRGB_BLOCK),
    ASTC_8x8_UNORM_BLOCK(VK_FORMAT_ASTC_8x8_UNORM_BLOCK),
    ASTC_8x8_SRGB_BLOCK(VK_FORMAT_ASTC_8x8_SRGB_BLOCK),
    ASTC_10x5_UNORM_BLOCK(VK_FORMAT_ASTC_10x5_UNORM_BLOCK),
    ASTC_10x5_SRGB_BLOCK(VK_FORMAT_ASTC_10x5_SRGB_BLOCK),
    ASTC_10x6_UNORM_BLOCK(VK_FORMAT_ASTC_10x6_UNORM_BLOCK),
    ASTC_10x6_SRGB_BLOCK(VK_FORMAT_ASTC_10x6_SRGB_BLOCK),
    ASTC_10x8_UNORM_BLOCK(VK_FORMAT_ASTC_10x8_UNORM_BLOCK),
    ASTC_10x8_SRGB_BLOCK(VK_FORMAT_ASTC_10x8_SRGB_BLOCK),
    ASTC_10x10_UNORM_BLOCK(VK_FORMAT_ASTC_10x10_UNORM_BLOCK),
    ASTC_10x10_SRGB_BLOCK(VK_FORMAT_ASTC_10x10_SRGB_BLOCK),
    ASTC_12x10_UNORM_BLOCK(VK_FORMAT_ASTC_12x10_UNORM_BLOCK),
    ASTC_12x10_SRGB_BLOCK(VK_FORMAT_ASTC_12x10_SRGB_BLOCK),
    ASTC_12x12_UNORM_BLOCK(VK_FORMAT_ASTC_12x12_UNORM_BLOCK),
    ASTC_12x12_SRGB_BLOCK(VK_FORMAT_ASTC_12x12_SRGB_BLOCK);

    public static final Collection<VkFormat> DEPTH_FORMATS = List.of(VkFormat.D32_SFLOAT,
                                                                     VkFormat.D32_SFLOAT_S8_UINT,
                                                                     VkFormat.D24_UNORM_S8_UINT);
    private static final VkFormat[] LOOKUP;

    static {
        LOOKUP = new VkFormat[values().length];

        for (final VkFormat format : values()) {
            LOOKUP[format.asInt()] = format;
        }
    }

    private final int format;
    private final int size;

    public int getSize() {
        if (this.size == -1) {
            throw new UnsupportedOperationException("Tried to get size of VkFormat with no defined size in the enum. "
                                                    + "Offending VkFormat: " + this.name());
        }
        return this.size;
    }

    VkFormat(final int format) {
        this(format, -1);
    }

    VkFormat(final int format, final int size) {
        this.format = format;
        this.size = size;
    }

    public static VkFormat findDepthFormat(final DeviceContext deviceContext) {
        return selectSupported(deviceContext,
                               VkImageTiling.OPTIMAL,
                               bitMask(VkFormatFeatureFlags.DEPTH_STENCIL_ATTACHMENT_BIT),
                               DEPTH_FORMATS)
                .orElseThrow(() -> new IllegalStateException("Could not find suitable depth image format!"));
    }

    public static Optional<VkFormat> selectSupported(
            final DeviceContext deviceContext,
            final VkImageTiling tiling,
            final BitMask<VkFormatFeatureFlags> featureFlags,
            final Collection<VkFormat> candidates
    ) {
        for (final var format : candidates) {
            try (final var ignored = stackPush()) {
                final var props = VkFormatProperties.callocStack();
                vkGetPhysicalDeviceFormatProperties(deviceContext.getPhysicalDevice(),
                                                    format.asInt(),
                                                    props);

                if (tiling == VkImageTiling.LINEAR && featureFlags.matches(props.linearTilingFeatures())) {
                    return Optional.of(format);
                } else if (tiling == VkImageTiling.OPTIMAL && featureFlags.matches(props.optimalTilingFeatures())) {
                    return Optional.of(format);
                }
            }
        }

        return Optional.empty();
    }

    public static VkFormat valueOf(final int format) {
        if (format >= 0 && format < LOOKUP.length && LOOKUP[format] != null) {
            return LOOKUP[format];
        }

        throw new UnsupportedOperationException("Unsupported image format: " + format);
    }

    public int asInt() {
        return this.format;
    }

    public boolean hasStencilComponent() {
        return this == VkFormat.D32_SFLOAT_S8_UINT || this == VkFormat.D24_UNORM_S8_UINT;
    }
}
